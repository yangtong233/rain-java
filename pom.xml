<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.rain</groupId>
    <artifactId>rain-java-parent</artifactId>
    <version>${project.version}</version>

    <packaging>pom</packaging>
    <description>项目父POM，进行版本控制、项目设置、依赖仲裁</description>

    <modules>
        <module>common</module>
        <module>core</module>
        <module>system</module>
    </modules>

    <properties>
        <!--项目名称-->
        <project.name>rain-java</project.name>
        <!--项目版本-->
        <project.version>1.0-SNAPSHOT</project.version>
        <!--JDK版本-->
        <java.version>21</java.version>
        <!--项目构建编码-->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <!--Maven编译的源代码版本-->
        <maven.compiler.source>${java.version}</maven.compiler.source>
        <!--Maven编译的目标版本-->
        <maven.compiler.target>${java.version}</maven.compiler.target>
        <!--Maven编译版本-->
        <maven.compiler.compilerVersion>${java.version}</maven.compiler.compilerVersion>
        <!--SpringBoot版本-->
        <boot.version>3.4.4</boot.version>
        <!--Guava工具库版本-->
        <guava.version>5.8.26</guava.version>
        <!--MyBatis-Plus版本-->
        <mp.version>3.5.11</mp.version>
        <!--接口文档版本-->
        <doc.version>4.4.0</doc.version>
        <!--druid数据库连接池版本-->
        <druid.version>1.2.22</druid.version>
        <!--poi版本版本-->
        <poi.version>5.2.5</poi.version>
        <!--mysql驱动版本-->
        <mysql.version>8.3.0</mysql.version>
        <!--junit版本-->
        <junit.version>8.3.0</junit.version>
        <!--Guava工具库版本-->
        <commons-compress.version>1.26.0</commons-compress.version>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${boot.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <!--构建项目的行为-->
    <build>
        <plugins>
            <plugin>
                <!--maven编译插件-->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.13.0</version>
                <configuration>
                    <!--源代码的jdk版本-->
                    <source>${java.version}</source>
                    <!--需要生成的目标class文件的编译版本-->
                    <target>${java.version}</target>
                    <!--使用release代替source和target-->
                    <release>${java.version}</release>
                    <!--字符集编码-->
                    <encoding>${project.build.sourceEncoding}</encoding>
                    <!--跳过测试-->
                    <skip>true</skip>
                    <!--是否运行一个独立的进程来执行编译任务-->
                    <fork>true</fork>
                    <compilerArgs>
                        <arg>-parameters</arg>
                    </compilerArgs>
                </configuration>
            </plugin>
            <!--该插件可以使打包扫描文件时，指定后缀名的文件不会被扫描，也就不会被损坏-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>3.3.1</version>
                <configuration>
                    <encoding>${project.build.sourceEncoding}</encoding>
                    <nonFilteredFileExtensions>
                        <nonFilteredFileExtension>xlsx</nonFilteredFileExtension>
                        <nonFilteredFileExtension>xls</nonFilteredFileExtension>
                        <nonFilteredFileExtension>doc</nonFilteredFileExtension>
                        <nonFilteredFileExtension>docx</nonFilteredFileExtension>
                        <nonFilteredFileExtension>jpg</nonFilteredFileExtension>
                        <nonFilteredFileExtension>png</nonFilteredFileExtension>
                    </nonFilteredFileExtensions>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>3.2.5</version>
                <configuration>
                    <skip>true</skip>
                </configuration>
            </plugin>
        </plugins>

        <!--打包时对不同目录下的文件处理方式-->
        <resources>
            <resource>
                <!--指定目录-->
                <directory>src/main/java</directory>
                <!--includes表示打包时除了默认的文件，还应该额外包含的文件-->
                <includes>
                    <include>**/*.xml</include>
                </includes>
                <!--excludes表示打包时应该排除的文件-->
                <!--<excludes></excludes>-->
                <!--filtering表示该目录下的文件，是否可以使用maven的profiles定义的变量-->
                <filtering>false</filtering>
            </resource>
            <resource>
                <directory>src/main/resources</directory>
                <includes>
                    <!--打包时应包含该目录下的所有文件-->
                    <include>**/*.*</include>
                </includes>
                <!--打包时会扫描该目录下的文件，将文件中的占位符@xxx@替换为profiles中配置的环境变量-->
                <!--扫描excel等文件时，可能造成文件损坏，而这些文件也不需要被扫描，所以需要配置额外的插件排除不需要扫描的文件，如上-->
                <filtering>true</filtering>
            </resource>
        </resources>
    </build>
    <!--环境配置-->
    <profiles>
        <!--开发环境-->
        <profile>
            <id>dev</id>
            <!--激活该环境的条件-->
            <activation>
                <!--默认环境-->
                <activeByDefault>true</activeByDefault>
            </activation>
            <!--这里配置的变量，能够在spring的配置文件中引用-->
            <properties>
                <!--当前环境-->
                <profile.env>dev</profile.env>
            </properties>
        </profile>
        <!--测试环境-->
        <profile>
            <id>test</id>
            <!--这里配置的变量，能够在spring的配置文件中引用-->
            <properties>
                <!--当前环境-->
                <profile.env>test</profile.env>
            </properties>
        </profile>
        <!--生产环境-->
        <profile>
            <id>prod</id>
            <!--这里配置的变量，能够在spring的配置文件中引用-->
            <properties>
                <!--当前环境-->
                <profile.env>prod</profile.env>
            </properties>
        </profile>
    </profiles>

</project>